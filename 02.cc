#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

/*
Problem:
   Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

   By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
   -------------------
   Fibbonaci is a recurrence relation - recurrence relations should be solved in O(1)
   However, you run into problems if you try to used the standard closed form, since it
   contains an irrational number.

   Below is a naive implementation, but it solves the problem quickly, and without the
   stack expense of a recursive solution. Not a good solution.
*/

long fibbonaciEvenSum(long numberToFindSumUnder) {
  long term1 = 1;
  long term2 = 1;
  long sum = 0;
  while (term1 + term2 < numberToFindSumUnder) {
    long tempTerm = term1 + term2;
    if ( tempTerm % 2 == 0) {
      sum += tempTerm;
    }
    term1 = term2;
    term2 = tempTerm;
  }
  return sum;
}

int main() {
  int testCases;
  long testValue;
  cin >> testCases;
  for (int testCase = 0; testCase < testCases ; testCase++ ) {
    cin >> testValue;
    cout << fibbonaciEvenSum(testValue) << endl;
  }
}
